datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  hobbies       Hobby[]
  posts         Post[]
  comments      Comment[]
  messages      Message[]
  // chats         Chat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Hobby {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  userId      String  @db.ObjectId
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  content  String
  userId   String    @db.ObjectId
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  postId  String @db.ObjectId
  userId  String @db.ObjectId
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Chat {
//   id         String    @id @default(auto()) @map("_id") @db.ObjectId
//   name       String?
//   users      User[]    @relation(references: [id])

//   messages   Message[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Message {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  userId  String @db.ObjectId
  chatId  String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  // chat       Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
